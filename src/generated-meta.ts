// This file is generated by `vscode-ext-gen`. Do not modify manually.
// @see https://github.com/antfu/vscode-ext-gen

// Meta info
export const publisher = "kevin-kwong"
export const name = "autohide"
export const version = "0.1.4"
export const displayName = "Auto Hide KB"
export const description = "Forked from AutoHide with optimized for a better keyboard-only usage experience"
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey = 
  | "autohide.toggleHideSideBar"
  | "autohide.toggleHideAuxiliaryBar"
  | "autohide.toggleHidePanel"
  | "autohide.toggleHideOnlyMouse"
  | "autohide.switchToManualMode"
  | "autohide.switchToAutoMode"
  | "autohide.runHide"
  | "autohide.enable"
  | "autohide.disable"

/**
 * Commands map registed by `kevin-kwong.autohide`
 */
export const commands = {
  /**
   * Toggle Auto Hide Side Bar for Current Workspace
   * @value `autohide.toggleHideSideBar`
   */
  toggleHideSideBar: "autohide.toggleHideSideBar",
  /**
   * Toggle Auto Hide Auxiliary Bar for Current Workspace
   * @value `autohide.toggleHideAuxiliaryBar`
   */
  toggleHideAuxiliaryBar: "autohide.toggleHideAuxiliaryBar",
  /**
   * Toggle Auto Hide Panel for Current Workspace
   * @value `autohide.toggleHidePanel`
   */
  toggleHidePanel: "autohide.toggleHidePanel",
  /**
   * Toggle hide Only mouse
   * @value `autohide.toggleHideOnlyMouse`
   */
  toggleHideOnlyMouse: "autohide.toggleHideOnlyMouse",
  /**
   * Switch to manual mode
   * @value `autohide.switchToManualMode`
   */
  switchToManualMode: "autohide.switchToManualMode",
  /**
   * Switch to auto mode
   * @value `autohide.switchToAutoMode`
   */
  switchToAutoMode: "autohide.switchToAutoMode",
  /**
   * Run hide immediately
   * @value `autohide.runHide`
   */
  runHide: "autohide.runHide",
  /**
   * Enable Auto Hide
   * @value `autohide.enable`
   */
  enable: "autohide.enable",
  /**
   * Disable Auto Hide
   * @value `autohide.disable`
   */
  disable: "autohide.disable",
} satisfies Record<string, CommandKey>

/**
 * Type union of all configs
 */
export type ConfigKey = 
  | "autohide.enable"
  | "autohide.autohideSideBar"
  | "autohide.autohideAuxiliaryBar"
  | "autohide.autohidePanel"
  | "autohide.autohideReferences"
  | "autohide.autohideNotifications"
  | "autohide.hideOnOpen"
  | "autohide.hideOnlyMouse"
  | "autohide.hideFromGit"
  | "autohide.mode"

export interface ConfigKeyTypeMap {
  "autohide.enable": boolean,
  "autohide.autohideSideBar": boolean,
  "autohide.autohideAuxiliaryBar": boolean,
  "autohide.autohidePanel": boolean,
  "autohide.autohideReferences": boolean,
  "autohide.autohideNotifications": boolean,
  "autohide.hideOnOpen": boolean,
  "autohide.hideOnlyMouse": boolean,
  "autohide.hideFromGit": boolean,
  "autohide.mode": ("auto" | "manual"),
}

export interface ConfigShorthandMap {
  enable: "autohide.enable",
  autohideSideBar: "autohide.autohideSideBar",
  autohideAuxiliaryBar: "autohide.autohideAuxiliaryBar",
  autohidePanel: "autohide.autohidePanel",
  autohideReferences: "autohide.autohideReferences",
  autohideNotifications: "autohide.autohideNotifications",
  hideOnOpen: "autohide.hideOnOpen",
  hideOnlyMouse: "autohide.hideOnlyMouse",
  hideFromGit: "autohide.hideFromGit",
  mode: "autohide.mode",
}

export interface ConfigItem<T extends keyof ConfigKeyTypeMap> {
  key: T,
  default: ConfigKeyTypeMap[T],
}


/**
 * Configs map registed by `kevin-kwong.autohide`
 */
export const configs = {
  /**
   * Enable Auto Hide
   * @key `autohide.enable`
   * @default `true`
   * @type `boolean`
   */
  enable: {
    key: "autohide.enable",
    default: true,
  } as ConfigItem<"autohide.enable">,
  /**
   * Hide the side bar when the user clicks into a text editor.
   * @key `autohide.autohideSideBar`
   * @default `true`
   * @type `boolean`
   */
  autohideSideBar: {
    key: "autohide.autohideSideBar",
    default: true,
  } as ConfigItem<"autohide.autohideSideBar">,
  /**
   * Hide the auxiliary bar (second side bar) when the user clicks into a text editor.
   * @key `autohide.autohideAuxiliaryBar`
   * @default `true`
   * @type `boolean`
   */
  autohideAuxiliaryBar: {
    key: "autohide.autohideAuxiliaryBar",
    default: true,
  } as ConfigItem<"autohide.autohideAuxiliaryBar">,
  /**
   * Hide the panel (output, terminal, etc.) when the user clicks into a text editor.
   * @key `autohide.autohidePanel`
   * @default `true`
   * @type `boolean`
   */
  autohidePanel: {
    key: "autohide.autohidePanel",
    default: true,
  } as ConfigItem<"autohide.autohidePanel">,
  /**
   * Hide the References panel (`Go to References`) when the user clicks into a text editor.
   * @key `autohide.autohideReferences`
   * @default `false`
   * @type `boolean`
   */
  autohideReferences: {
    key: "autohide.autohideReferences",
    default: false,
  } as ConfigItem<"autohide.autohideReferences">,
  /**
   * Hide the notifications when the user clicks into a text editor.
   * @key `autohide.autohideNotifications`
   * @default `false`
   * @type `boolean`
   */
  autohideNotifications: {
    key: "autohide.autohideNotifications",
    default: false,
  } as ConfigItem<"autohide.autohideNotifications">,
  /**
   * Hide side bar and panel when VSCode first opens.
   * @key `autohide.hideOnOpen`
   * @default `true`
   * @type `boolean`
   */
  hideOnOpen: {
    key: "autohide.hideOnOpen",
    default: true,
  } as ConfigItem<"autohide.hideOnOpen">,
  /**
   * Enable/Disable hide only with mouse
   * @key `autohide.hideOnlyMouse`
   * @default `true`
   * @type `boolean`
   */
  hideOnlyMouse: {
    key: "autohide.hideOnlyMouse",
    default: true,
  } as ConfigItem<"autohide.hideOnlyMouse">,
  /**
   * Enable/Disable run hide when open git changes
   * @key `autohide.hideFromGit`
   * @default `false`
   * @type `boolean`
   */
  hideFromGit: {
    key: "autohide.hideFromGit",
    default: false,
  } as ConfigItem<"autohide.hideFromGit">,
  /**
   * set auto/manual mode
   * @key `autohide.mode`
   * @default `"auto"`
   * @type `string`
   */
  mode: {
    key: "autohide.mode",
    default: "auto",
  } as ConfigItem<"autohide.mode">,
}

export interface ScopedConfigKeyTypeMap {
  "enable": boolean,
  "autohideSideBar": boolean,
  "autohideAuxiliaryBar": boolean,
  "autohidePanel": boolean,
  "autohideReferences": boolean,
  "autohideNotifications": boolean,
  "hideOnOpen": boolean,
  "hideOnlyMouse": boolean,
  "hideFromGit": boolean,
  "mode": ("auto" | "manual"),
}

export const scopedConfigs = {
  scope: "autohide",
  defaults: {
    "enable": true,
    "autohideSideBar": true,
    "autohideAuxiliaryBar": true,
    "autohidePanel": true,
    "autohideReferences": false,
    "autohideNotifications": false,
    "hideOnOpen": true,
    "hideOnlyMouse": true,
    "hideFromGit": false,
    "mode": "auto",
  } satisfies ScopedConfigKeyTypeMap,
}

